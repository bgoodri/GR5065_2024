---
title: "Recitation for Week03"
author: "Apoorva Joshi"
format: revealjs
editor: visual
execute: 
  echo: true
---

## Setup for Recitation

-   Open the GR5065_2024 "project" in RStudio

-   Click the blue arrow under the Git tab to pull

-   Change the working directory to Week03

-   Create a new Quarto document (not .R) in Week03, which you should use to write your answers, along with your notes

-   Recall from Thursday that now $\kappa \in \{0,\mathbb{Z}_+\}$ is a parameter: $$\Pr\left(x \mid n, \kappa\right) = \frac{\log_{n + 2 + \kappa}\left(1 + \frac{1}{n + 1 + \kappa - x}\right)}{1 - \log_{n + 2 + \kappa}\left(1 + \kappa\right)}.$$ If $\kappa = 0$, we get the same PMF for bowling as in Week02.

## Quarto Document (follow along!)

-   Delete whatever comes after the YAML in the example Quarto document. At the end of the YAML section, put

<!-- -->

```         
execute: 
  echo: true
```

-   Create a new R chunk at the top by clicking on Insert -\> Code Chunk -\> R or by using the keyboard shortcut

-   In this R chunk, call the `set.seed` function once with any positive integer, like your birth date

```{r}
set.seed(20240205)
```

-   Doing so makes the pseudo-random numbers come out the same way every time you render to a PDF

## 1 Frame of Bowling with $\kappa$ (inability)

Create a R chunk and type all this in it

```{r}
source("bowling.R")    # creates Omega and Pr() with a kappa argument
m <- 4.2               # expectation of kappa
(kappa <- rpois(1, m)) # draw once from prior
```

. . .

The conditional probabilities for $X_1 \mid \kappa$ are admissible

```{r}
round(c(Pr(Omega, n = 10, kappa), total = sum(Pr(Omega, n = 10, kappa))), 4)
```

so, go ahead and draw the first frame, conditional on $\kappa$

```{r}
x_1 <- sample(Omega, size = 1, prob = Pr(Omega, n = 10, kappa))
x_2 <- sample(Omega, size = 1, prob = Pr(Omega, n = 10 - x_1, kappa))
```

```{r}
#| echo: false
rm(x_1, x_2, kappa)
```

## $R$ Frames of Bowling with $\kappa$ (inability)

Type this in a new R chunk, which we did on Thursday:

```{r}
#| code-line-numbers: 1-3|4-6|7-10|11
R <- 10^7  # practically infinite, so capitalize X_1 and X_2
frames <-  # tibble with the results of R frames of bowling
  tibble(kappa = rpois(n = R, m)) |> # draw kappa from prior
  group_by(kappa) |> # like Week02 but now also condition on kappa
  mutate(X_1 = sample(Omega, size = n(), replace = TRUE,
                      prob = Pr(Omega, n = 10, first(kappa)))) |>
  group_by(kappa, X_1) |>
  mutate(X_2 = sample(Omega, size = n(), replace = TRUE, prob =
                      Pr(Omega, 10 - first(X_1), first(kappa)))) |>
  ungroup()
```

. . .

```{r}
print(frames, n = 6)
```

## Modern Probabilities (in R chunks)

-   How would you compute the probability that $X_1 = 8$ and $X_2 = 2$ using `frames`, irrespective of $\kappa$?

. . .

```{r}
summarize(frames, prob = mean(X_1 == 8 & X_2 == 2))
```

-   How would you compute the probability that $X_1 = 8$, given that $X_2 = 2$ using `frames`, irrespective of $\kappa$?

. . .

```{r}
filter(frames, X_2 == 2) |> 
  summarize(prob = mean(X_1 == 8))
```

## Expectations of Interest

-   Using `frames`, compute the expectation of $\kappa$, $X_1$, and $X_2$

. . .

```{r}
summarize(frames, mean(kappa), mean(X_1), mean(X_2))
```

-   Using `frames`, compute the expectation of $\kappa$ given $X_1 = 8$

. . .

```{r}
filter(frames, X_1 == 8) |> 
  summarize(mean(kappa)) # less now
```

## Scoring in Bowling

```{r}
frames <- mutate(frames, game = rep(1:(n() / 10), each = 10)) # type this
```

-   Like last time, we will utilize "World Bowling" [scoring](https://en.wikipedia.org/wiki/Ten-pin_bowling#World_Bowling_scoring):

```{r}
#| code-line-numbers: 1|2|3|4|5-7|8
scores <- mutate(frames, points = case_when(
    X_1 == 10 ~ 30,             # strike
    X_1 + X_2 == 10 ~ 10 + X_1, # spare but not a strike
    TRUE ~ X_1 + X_2            # neither a strike nor a spare
  )) |> 
  group_by(game) |> # now calculate one game at a time
  summarize(game_score = sum(points)) # reduction, so now tidy by game
```

. . .

-   Using `scores`, compute the expected score in a game

. . .

```{r}
summarize(scores, mean(game_score))
```

## Individual Exercise

-   Suppose two bowlers are competing against each other in a bowling match

    -   For bowler A, you have a Poisson prior on $\kappa$ with expectation $m_A = 4.2$ (as before)

    -   For bowler B, $m_B = 6.75$

-   Use $R$ simulations to compute the probability that the first bowler gets a higher score than the second bowler

-   This just requires that you repeat and synthesize what you have previously done today, plus `bind_cols` the tibbles for the two bowlers together in a R chunk

## Answer to Individual Exercise

```{r}
tibble(kappa = rpois(R, 6.75)) |> 
  group_by(kappa) |> 
  mutate(X_1 = sample(Omega, size = n(), replace = TRUE, prob = 
                      Pr(Omega, n = 10, kappa = first(kappa)))) |>
  group_by(kappa, X_1) |>
  mutate(X_2 = sample(Omega, size = n(), replace = TRUE, prob = 
                      Pr(Omega, 10 - first(X_1), first(kappa)))) |> 
  ungroup() |> 
  mutate(points = case_when(
    X_1 == 10 ~ 30,
    X_1 + X_2 == 10 ~ 10 + X_1,
    TRUE ~ X_1 + X_2)
  ) |> 
  group_by(game_B = rep(1:(R / 10), each = 10)) |> 
  summarize(game_score_B = sum(points), .groups = "drop") |> 
  bind_cols(scores) |> 
  # would be very hard to do deterministically
  summarize(prob = mean(game_score > game_score_B))
```

## Conclusion

-   A random variable is a function

-   A function of a function is a (composite) function

-   A function of a random variable is a random variable

-   Random variables (usually) have expectations

-   We can compute the expectation of a function like bowling score using $R$ simulations of our generative model

-   So, you need to be able to code a generative model for your phenomenon of interest, including a prior distribution you can draw parameters from

-   Render your Quarto document for today into a PDF
